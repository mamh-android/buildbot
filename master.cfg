# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("bf-c1", "1",max_builds=1),
               BuildSlave("bf-c2", "1",max_builds=1),
               BuildSlave("bf-c3", "1",max_builds=1),
               BuildSlave("bf-c4", "1",max_builds=1),
               BuildSlave("bf-c5", "1",max_builds=1),
               BuildSlave("bf-f1", "1",max_builds=1),
               BuildSlave("bf-f2", "1",max_builds=1),
               BuildSlave("bf-f3", "1",max_builds=1),
               BuildSlave("bf-cosmo2", "1",max_builds=1),
               BuildSlave("bf-imauto", "1",max_builds=1)]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

gerrit_server = "privgit.marvell.com"
gerrit_user = "buildfarm"
from buildbot.changes.gerritchangesource import GerritChangeSource
c['change_source'] = GerritChangeSource(gerrit_server, gerrit_user)

#c['change_source'].append(GerritChangeSource('shgit.marvell.com', 'buildfarm'))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.changes import filter
from buildbot.schedulers import timed

#build_scheduler1 = SingleBranchScheduler(name="TestSchedulerBuild", builderNames=['builder1'], branch=None)

c['schedulers'] = []

cosmo_bpb = AnyBranchScheduler(
            name = 'all',
            change_filter = filter.ChangeFilter( project = 'cosmo' ),
            treeStableTimer = None,
            builderNames = ['cosmo_by_patch_build',],
            )

android_dist = AnyBranchScheduler(
            name = 'android_dist',
            change_filter = filter.ChangeFilter( project = 'buildbot/manifest_backup', branch_re = '.*/.*' ),
            treeStableTimer = None,
            builderNames = ['android_distraction_build',],
            )

c["schedulers"].append(cosmo_bpb)
c["schedulers"].append(android_dist)

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.master import MasterShellCommand
from buildbot.process.properties import WithProperties,Property
from buildbot.steps.source.git_marvell import Git_marvell
from buildbot.steps.shell import ShellCommand

def nextBuild(bldr, requests):
    request=requests[0]
    max_priority = 0
    for r in requests:
        if r.priority>max_priority:
            request = r
            max_priority = r.priority
    return request

develop_factory = BuildFactory()
develop_factory_d = BuildFactory()
develop_factory_x64 = BuildFactory()
release_factory = BuildFactory()
code_freeze_factory = BuildFactory()
genandroidsrc_factory = BuildFactory()
createrlsbranch_factory = BuildFactory()
generate_release_package_factory = BuildFactory()
generate_patch_file_factory = BuildFactory()
upload_internal_release_factory = BuildFactory()
upload_publish_release_factory = BuildFactory()
odvb_factory = BuildFactory()
ppat_factory = BuildFactory()
odvb_and_ppat_factory = BuildFactory()
#new factory for dailybuild with ppat
develop_factory_ppat = BuildFactory()
#new factory for dailybuild with gc test cases
develop_factory_gc = BuildFactory()
rtvb_factory = BuildFactory()
cosmo_factory = BuildFactory()
cosmo_bpb_factory = BuildFactory()
imauto_factory = BuildFactory()
cosmo_imauto_factory = BuildFactory()
cosmo_odt_factory = BuildFactory()
gcvb_factory = BuildFactory()
genmanifest_factory = BuildFactory()

develop_factory.addStep(ShellCommand(command=["bash", "/home/buildfarm/buildbot_script/buildbot/android_full_build.sh", Property('branch'), Property('Product_Type')],timeout=2500,haltOnFailure="True",flunkOnFailure="True"))
develop_factory.addStep(ShellCommand(command=['/home/buildfarm/buildbot_script/buildbot/tools/Ipp_auto_build/Load_core.py', '-b', Property('branch'), '-n', Property('buildnumber'), '|', 'tee', '.core.build.log']))
develop_factory.addStep(ShellCommand(command=['/home/buildfarm/buildbot_script/buildbot/tools/Ipp_auto_build/Load_wfd_core.py', '-b', Property('branch'), '-n', Property('buildnumber'), '|', 'tee', '.wfd_core.build.log']))
#develop_factory.addStep(ShellCommand(command=["bash", "/home/buildfarm/buildbot_script/buildbot/test_case_build.sh", Property('Android_Case_Build')]))
develop_factory.addStep(ShellCommand(command=["/home/buildfarm/buildbot_script/buildbot/tools/Gfx_auto_build/gfxtestAutobuild.py", "-b", Property('branch')]))

#genManifest.xml
genmanifest_factory.addStep(ShellCommand(command=["bash", "/home/buildfarm/buildbot_script/buildbot/genManifestXml.sh", '-b', Property('branch')],haltOnFailure="True",flunkOnFailure="True"))

develop_factory_d.addStep(ShellCommand(command=["bash", "/home/buildfarm/buildbot_script/buildbot/android_full_build.sh", Property('branch'), Property('Product_Type')],timeout=2500,haltOnFailure="True",flunkOnFailure="True"))

develop_factory_x64.addStep(ShellCommand(command=["bash", "/home/buildfarm/buildbot_script/buildbot/android_full_build.sh", Property('branch'), Property('Product_Type')],haltOnFailure="True",flunkOnFailure="True"))

release_factory.addStep(ShellCommand(command=['/home/buildfarm/buildbot_script/buildbot/tools/Code_freeze/code_freeze.py', '-b', Property('branch'), '-m', Property('useremail'), '-r', Property('type')]))
#Code Freeze
code_freeze_factory.addStep(ShellCommand(command=['/home/buildfarm/buildbot_script/buildbot/tools/Code_freeze/code_freeze.py', '-b', Property('branch'), '-m', Property('useremail'), '-r', Property('type')]))

genandroidsrc_factory.addStep(ShellCommand(command=['/home/buildfarm/buildbot_script/buildbot/genAndroidSrc.sh', '-b', 'master', '-m', Property('Manifest_Xml')]))

createrlsbranch_factory.addStep(ShellCommand(command=['/home/buildfarm/buildbot_script/buildbot/createBranchOnShgit.sh', '-b', Property('Manifest_Branch'), '-m', Property('Manifest_Xml'), '-a',  Property('Test_Type'), '-e', Property('useremail')]))

generate_release_package_factory.addStep(ShellCommand(command=["bash", "/home/buildfarm/buildbot_script/buildbot/generate_release_package.sh", Property('Auto_Build_Link'), Property('Platform'), Property('Product'), Property('Release_Name'), Property('RC'),Property('RPLP')]))

generate_patch_file_factory.addStep(ShellCommand(command=["bash", "/home/buildfarm/buildbot_script/buildbot/generate_patch_file.sh", Property('Base_Build_Link'), Property('Current_Build_Link'), Property('Output_Folder')]))

upload_internal_release_factory.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/upload_internal_release_build.sh","-t",Property('Tag_Name'),"-m",Property('Manifest_Xml'),"-b",Property('Branch_Name')],haltOnFailure="True"))
upload_internal_release_factory.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/genPreBuildBin.sh","-t",Property('Tag_Name'),"-m",Property('Manifest_Xml')]))
upload_internal_release_factory.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/publishRls.sh","-t",Property('Tag_Name'),"-m",Property('Manifest_Xml')]))

upload_publish_release_factory.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/upload_publish_release_build.sh","-t",Property('Tag_Name'),"-m",Property('Manifest_Xml'),"-b",Property('Branch_Name')],haltOnFailure="True"))
upload_publish_release_factory.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/genPreBuildBin.sh","-t",Property('Tag_Name'),"-m",Property('Manifest_Xml')]))
upload_publish_release_factory.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/send_mail_notification.sh","-e",Property('useremail'),"-t",Property('buildername'),"-b",Property('Branch_Name'),"-a",Property('Tag_Name'),"-n",Property('buildnumder'),"-m",Property('Manifest_Xml')],alwaysRun="Ture"))

odvb_factory.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/od_virtual_build.sh","-p",Property('Gerrit_Patch'),"-m",Property('Manifest_Xml'),"-b",Property('Branch_Name'),"-d",Property('Dest_Dir'),"-v",Property('Product_Type'),"-de",Property('Build_Device')]))
odvb_factory.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/send_mail_notification.sh","-e",Property('useremail'),"-t",Property('buildername'),"-n",Property('buildnumber'),"-p",Property('Gerrit_Patch'),"-m",Property('Manifest_Xml')]))

#ppat
ppat_factory.addStep(Git_marvell(repourl='ssh://buildfarm@shgit.marvell.com/git/android/shared/Buildbot/ppat.git', mode='full', method='fresh', workdir="build_script", haltOnFailure="True"))
ppat_factory.addStep(ShellCommand(command=['./trigger.py', '--imagepath', Property('ODVB_Dest_Dir'), '--device', Property('Build_Device'), '--blf', Property('Build_Blf'), '--assigner', Property('useremail'), '--testcase', Property('PPAT_Xml'), '--purpose', Property('Reason'), '--mode', 'manual'], timeout=500, workdir="build_script", alwaysRun="Ture"))

odvb_and_ppat_factory.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/od_virtual_build.sh","-p",Property('Gerrit_Patch'),"-m",Property('Manifest_Xml'),"-b",Property('BRANCH_NAME'),"-d","ODVB_PPAT_AUTO","-v",Property('Product_Type'),"-de",Property('Build_Device')],haltOnFailure="True",flunkOnFailure="True"))
odvb_and_ppat_factory.addStep(Git_marvell(repourl='ssh://buildfarm@shgit.marvell.com/git/android/shared/Buildbot/ppat.git', mode='full', method='fresh', workdir="build_script", haltOnFailure="True"))
odvb_and_ppat_factory.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/tools/PPAT/startPPAT.sh", Property('Build_Device'), Property('Build_Blf'), Property('useremail'), Property('PPAT_Xml'), Property('Reason')]))
#odvb_and_ppat_factory.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/tools/PPAT/sendmail.sh","-e",Property('useremail'),"-t",Property('buildername')]))

#daily build + ppat
develop_factory_ppat.addStep(ShellCommand(command=["bash", "/home/buildfarm/buildbot_script/buildbot/android_full_build.sh", Property('branch'), Property('Product_Type')],haltOnFailure="True",flunkOnFailure="True"))
#develop_factory_ppat.addStep(ShellCommand(command=["bash", "/home/buildfarm/buildbot_script/buildbot/test_case_build.sh", Property('Android_Case_Build')]))
develop_factory_ppat.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/tools/Gfx_auto_build/gfxtestAutobuild.sh", Property('Graphic_Build'), Property('branch')]))
develop_factory_ppat.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/tools/PPAT/startPPAT.sh","-r",Property('PPAT'),"-d","PROPERTY_DIR","-b","pxa988-jb4.3","--dev","pxa1088dkb_def:pxa1088dkb","--blf","HELN_Nontrusted_eMMC_1GB_400MHZ.blf","--assigner","zhoulz@marvell.com","--bn",Property('buildnumber'),"--tc",'{"TestCaseList":[{"Name":"1080p"},{"Name":"720p"},{"Name":"VGA"},{"Name":"home"},{"Name":"standby"},{"Name":"FM"},{"Name":"KKR"},{"Name":"Angrybirds"},{"Name":"SMS"},{"Name":"Menu_Navigation"},{"Name":"mp3"},{"Name":"WiFi_On"},{"Name":"WiFi_Conn"},{"Name":"BT_On"},{"Name":"BT_Conn"},{"Name":"Record_720p(OV5647)"},{"Name":"Take_pictures(OV5647)"}],"inputs":"table:helen"}',"-p","daily power test"]))

#daily build + gc test case
develop_factory_gc.addStep(ShellCommand(command=["bash", "/home/buildfarm/buildbot_script/buildbot/android_full_build.sh", Property('branch'), Property('Product_Type')],haltOnFailure="True",flunkOnFailure="True"))
#develop_factory_gc.addStep(ShellCommand(command=["bash", "/home/buildfarm/buildbot_script/buildbot/test_case_build.sh", Property('Android_Case_Build')]))
develop_factory_gc.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/tools/Gfx_auto_build/gfxtestAutobuild.sh", Property('Graphic_Build'), Property('branch')]))
develop_factory_gc.addStep(ShellCommand(command=['/home/buildfarm/buildbot_script/buildbot/tools/Ipp_auto_build/Load_core.py', '-b', Property('branch'), '-n', Property('buildnumber'), '|', 'tee', '.core.build.log']))

#rtvb build for 1l88 jb4.3
#rtvb_factory.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/rt_virtual_build.sh","-b",Property('Branch_Name'),"-v",Property('Product_Type'),"-de",Property('Build_Device')]))
rtvb_factory.addStep(ShellCommand(command=["bash","/home/buildfarm/buildbot_script/buildbot/rt_virtual_build.sh","-b","pxa988-kk4.4","-v","userdebug","-de","pxa1L88dkb_def:pxa1L88dkb"]))

#cosmo_factory steps
#cosmo_factory.addStep(ShellCommand(command=['net', 'use', 'W:', '\\\\sh-srv06\\common'], timeout=1500, workdir="cosmo_build", alwaysRun="Ture"))
#cosmo_factory.addStep(ShellCommand(command=['net', 'use'], timeout=1500, workdir="cosmo_build", alwaysRun="Ture"))
cosmo_factory.addStep(Git_marvell(repourl='ssh://buildfarm@privgit.marvell.com:29418/buildscript', mode='full', method='fresh', workdir="build_script", haltOnFailure="True"))
cosmo_factory.addStep(Git_marvell(repourl='ssh://buildfarm@privgit.marvell.com:29418/cosmo', mode='full', method='fresh', workdir="cosmo_build", haltOnFailure="True"))
cosmodailylog_1 = {}
for i in range(16):
    a = {}
    a["filename"] = 'test\\DailyAutoTestLog\\%s' % i
    cosmodailylog_1['core_%s' % i] = a
cosmo_factory.addStep(ShellCommand(command=['..\\build_script\\Cosmo_daily.py', '-n', Property('buildnumber'), '-b', Property('branch'), '|', 'tee', '.cosmo.build.log'], timeout=9000, workdir="cosmo_build", alwaysRun="Ture", logfiles=cosmodailylog_1))

#cosmo_bpb_factory steps
#cosmo_bpb_factory.addStep(ShellCommand(command=['net', 'use', 'W:', '\\\\sh-srv06\\common'], timeout=1500, workdir="cosmo_build", alwaysRun="Ture"))
#cosmo_bpb_factory.addStep(ShellCommand(command=['net', 'use'], timeout=1500, workdir="cosmo_build", alwaysRun="Ture"))
cosmo_bpb_factory.addStep(Git_marvell(repourl='ssh://buildfarm@privgit.marvell.com:29418/buildscript', mode='full', method='fresh', workdir="build_script", haltOnFailure="True"))
cosmo_bpb_factory.addStep(Git_marvell(repourl='ssh://buildfarm@privgit.marvell.com:29418/cosmo', mode='full', method='fresh', workdir="cosmo_build", haltOnFailure="True"))
cosmo_bpb_factory.addStep(ShellCommand(command=['..\\build_script\\Cosmo_BPB.py', '-r', Property('revision'), '-n', Property('buildnumber'), '-b', Property('branch'), '-f', 'test\\PerCommitPreBuild.cfg', '|', 'tee', '.cosmo.build.log'], timeout=2500, workdir="cosmo_build", alwaysRun="Ture", logfiles=cosmodailylog_1))
#cosmo_bpb_factory.addStep(ShellCommand(command=['..\\build_script\\Cosmo_BPB.py', '-r', Property('event.patchSet.revision'), '-n', Property('buildnumber'), '-b', Property('branch'), '-f', 'test\\PerCommitPreBuild.cfg', '|', 'tee', '.cosmo.build.log'], timeout=9000, workdir="cosmo_build", alwaysRun="Ture", logfiles=cosmodailylog_1))

#imauto_factory steps
imauto_factory.addStep(Git_marvell(repourl='ssh://buildfarm@privgit.marvell.com:29418/buildscript', mode='full', method='fresh', workdir="build_script", haltOnFailure="True"))
imauto_factory.addStep(Git_marvell(repourl='ssh://shgit.marvell.com/git/qae/multimedia_testsuite', mode='full', method='fresh', workdir="imauto", haltOnFailure="True"))
imauto_s = ShellCommand(
           command=['..\\..\\..\\..\\build_script\\Load_imauto.py',
                    '-p', Property('Image_path'),
                    '-s', Property('Sensor'),
                    '-r', Property('Resolution'),
                    '-f', Property('Focus'),
                    '-r', Property('Resolution'),
                    '-n', Property('buildnumber'),
                    '-b', Property('Branch_Name'),
                    '-t', Property('TestImage'),
                    '-i', Property('ISP'),
                    '-w', Property('FWver'),
                    '-c', Property('Calver'),
                    '-m', Property('useremail'),
                    '-a', Property('Platform'),
                    '-o', Property('Reason'),
                    '-e', Property('Test_Times'),
                    '|', 'tee', '.imauto.build.log'],
           timeout=2500,workdir="imauto\\tools\\IMAUTO\\TestScript",alwaysRun="Ture"
           )
imauto_factory.addStep(imauto_s)

#cosmo and imauto_factory steps
cosmo_imauto_factory.addStep(Git_marvell(repourl='ssh://buildfarm@privgit.marvell.com:29418/buildscript', mode='full', method='fresh', workdir="build_script", haltOnFailure="True"))
cosmo_imauto_factory.addStep(Git_marvell(repourl='ssh://shgit.marvell.com/git/qae/multimedia_testsuite', mode='full', method='fresh', workdir="imauto", haltOnFailure="True"))
cosmo_imauto_s = ShellCommand(
           command=['..\\..\\..\\..\\build_script\\Load_imauto_after_cosmo.py',
                    '-b', Property('branch'),
                    '-n', Property('buildnumber'),
                    '-m', Property('useremail'),
                    '|', 'tee', '.imauto.build.log'],
           timeout=2500,workdir="imauto\\tools\\IMAUTO\\TestScript",alwaysRun="Ture"
           )
cosmo_imauto_factory.addStep(cosmo_imauto_s)

#cosmo odt steps
cosmo_odt_factory.addStep(Git_marvell(repourl='ssh://buildfarm@privgit.marvell.com:29418/buildscript', mode='full', method='fresh', workdir="build_script", haltOnFailure="True"))
cosmo_odt_factory.addStep(Git_marvell(repourl='ssh://buildfarm@privgit.marvell.com:29418/cosmo', mode='full', method='fresh', workdir="cosmo_build", haltOnFailure="True"))
cosmo_odt_factory.addStep(ShellCommand(command=['..\\build_script\\Cosmo_odt.py', '-n', Property('buildnumber'), '-b', Property('Branch_Name'), '-f', Property('Data_folder'),'-m', Property('useremail'), '|', 'tee', '.cosmo.build.log'], timeout=9000, workdir="cosmo_build", alwaysRun="Ture", logfiles=cosmodailylog_1))

#gcvb + ppat
gcvb_factory.addStep(ShellCommand(command=["/home/buildfarm/buildbot_script/buildbot/tools/GC_power_performance/android_gc_ppat.py", '-b', Property('branch')], workdir="/home/buildfarm/buildbot_script/buildbot", haltOnFailure="True",flunkOnFailure="True"))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="android_develop_build",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      #slavenames=["bf-f2"],
      nextBuild=nextBuild,
      factory=develop_factory))

c['builders'].append(
    BuilderConfig(name="android_distraction_build",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      #slavenames=["bf-f2"],
      nextBuild=nextBuild,
      factory=develop_factory_d))

c['builders'].append(
    BuilderConfig(name="genmanifest_build",
      slavenames=["bf-c2","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      factory=genmanifest_factory))

c['builders'].append(
    BuilderConfig(name="android_release_build",
      slavenames=["bf-c2","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      factory=release_factory))

c['builders'].append(
    BuilderConfig(name="code_freeze",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      factory=code_freeze_factory))

c['builders'].append(
    BuilderConfig(name="gen_android_src",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      factory=genandroidsrc_factory))

c['builders'].append(
    BuilderConfig(name="create_rls_branch",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5"],
      factory=createrlsbranch_factory))

c['builders'].append(
    BuilderConfig(name="generate_release_package",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      factory=generate_release_package_factory))

c['builders'].append(
    BuilderConfig(name="generate_patch_file",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      factory=generate_patch_file_factory))

c['builders'].append(
    BuilderConfig(name="upload_internal_release_build",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5"],
      factory=upload_internal_release_factory))

c['builders'].append(
    BuilderConfig(name="upload_public_release_build",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5"],
      factory=upload_publish_release_factory))

c['builders'].append(
    BuilderConfig(name="on_demand_virtual_build",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      factory=odvb_factory))

c['builders'].append(
    BuilderConfig(name="ppat_test",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      factory=ppat_factory))

c['builders'].append(
    BuilderConfig(name="on_demand_virtual_build_with_ppat",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      factory=odvb_and_ppat_factory))

c['builders'].append(
    BuilderConfig(name="android_develop_build_ppat",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      nextBuild=nextBuild,
      factory=develop_factory_ppat))

c['builders'].append(
    BuilderConfig(name="android_develop_build_gc",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      nextBuild=nextBuild,
      factory=develop_factory_gc))

c['builders'].append(
    BuilderConfig(name="real_time_virtual_build",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      factory=rtvb_factory))

c['builders'].append(
    BuilderConfig(name="cosmo_build",
      slavenames=["bf-cosmo2"],
      factory=cosmo_factory))

c['builders'].append(
    BuilderConfig(name="cosmo_by_patch_build",
      slavenames=["bf-cosmo2"],
      factory=cosmo_bpb_factory))

c['builders'].append(
    BuilderConfig(name="cosmo_odt",
      slavenames=["bf-cosmo2"],
      factory=cosmo_odt_factory))

c['builders'].append(
    BuilderConfig(name="image_auto_test",
      slavenames=["bf-imauto"],
      factory=imauto_factory))

c['builders'].append(
    BuilderConfig(name="cosmo_image_auto_test",
      slavenames=["bf-imauto"],
      factory=cosmo_imauto_factory))

c['builders'].append(
    BuilderConfig(name="gc_virtual_build",
      slavenames=["bf-c1","bf-c2","bf-c3","bf-c4","bf-c5","bf-f1","bf-f2","bf-f3"],
      factory=gcvb_factory))
####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = True,
    pingBuilder = False,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Pyflakes"
c['titleURL'] = "http://divmod.org/trac/wiki/DivmodPyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite?serialize_access=1"

from buildbot.status import client
c['status'].append(client.PBListener(9988))
c['debugPassword'] = "debugpassword"

#Cosmo projects start
cosmo_build_master= timed.Nightly(name="cosmo_build_master", branch="master", builderNames=["cosmo_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"yfshi@marvell.com","PPAT":"False","purpose":"cosmo master daily build","Test_Case_Build":"False",})
c["schedulers"].append(cosmo_build_master)
#cosmo_imauto_master= timed.Nightly(name="cosmo_imauto_master", branch="master", builderNames=["cosmo_image_auto_test"], hour=6, minute=00,properties ={"Graphic_Build":"False","useremail":"yfshi@marvell.com","PPAT":"False","purpose":"cosmo imauto master 2014-7-16","Test_Case_Build":"False",})
#c["schedulers"].append(cosmo_imauto_master)
cosmo_build_alpha2= timed.Nightly(name="cosmo_build_alpha2", branch="alpha2", builderNames=["cosmo_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"yfshi@marvell.com","PPAT":"False","purpose":"cosmo alpha2 daily build","Test_Case_Build":"False",})
c["schedulers"].append(cosmo_build_alpha2)
cosmo_build_alpha41= timed.Nightly(name="cosmo_build_alpha41", branch="alpha4.1", builderNames=["cosmo_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"yfshi@marvell.com","PPAT":"False","purpose":"cosmo alpha4.1 2014-12-12","Test_Case_Build":"False",})
c["schedulers"].append(cosmo_build_alpha41)
cosmo_build_tuning= timed.Nightly(name="cosmo_build_tuning", branch="tuning", builderNames=["cosmo_build"], hour=1, minute=00,properties ={"Graphic_Build":"False","useremail":"yfshi@marvell.com","PPAT":"False","purpose":"cosmo tuning daily build","Test_Case_Build":"False",})
c["schedulers"].append(cosmo_build_tuning)
cosmo_build_col_af_research1= timed.Nightly(name="cosmo_build_col_af_research1", branch="col_af_research1", builderNames=["cosmo_build"], hour=1, minute=00,properties ={"Graphic_Build":"False","useremail":"yfshi@marvell.com","PPAT":"False","purpose":"cosmo auto fouch 2014-07-10","Test_Case_Build":"False",})
c["schedulers"].append(cosmo_build_col_af_research1)
cosmo_build_col_lsb_research3= timed.Nightly(name="cosmo_build_col_lsb_research3", branch="col_lsb_research3", builderNames=["cosmo_build"], hour=1, minute=00,properties ={"Graphic_Build":"False","useremail":"yfshi@marvell.com","PPAT":"False","purpose":"cosmo auto fouch 2014-08-20","Test_Case_Build":"False",})
c["schedulers"].append(cosmo_build_col_lsb_research3)
cosmo_build_col_autolsc_research2= timed.Nightly(name="cosmo_build_col_autolsc_research2", branch="col_autolsc_research2", builderNames=["cosmo_build"], hour=1, minute=00,properties ={"Graphic_Build":"False","useremail":"yfshi@marvell.com","PPAT":"False","purpose":"col_autolsc_research2 2014-11-13","Test_Case_Build":"False",})
c["schedulers"].append(cosmo_build_col_autolsc_research2)
cosmo_build_iqcrosscheck_alpha4_COL6= timed.Nightly(name="cosmo_build_iqcrosscheck_alpha4_COL6", branch="iqcrosscheck_alpha4_COL6", builderNames=["cosmo_build"], hour=1, minute=00,properties ={"Graphic_Build":"False","useremail":"yfshi@marvell.com","PPAT":"False","purpose":"2015-01-04","Test_Case_Build":"False",})
c["schedulers"].append(cosmo_build_iqcrosscheck_alpha4_COL6)
#Cosmo projects end
#gcvb
gcvb_pxa1908_kk44= timed.Nightly(name="gcvb_pxa1908_kk4.4", branch="pxa1908-kk4.4", builderNames=["gc_virtual_build"], hour=20, minute=00,properties ={"Graphic_Build":"False","useremail":"fuqzhai@marvell.com","PPAT":"False","purpose":"","Test_Case_Build":"False",})
c["schedulers"].append(gcvb_pxa1908_kk44)
gcvb_rls_pxa1908_kk44_k314_alpha1= timed.Nightly(name="gcvb_rls_pxa1908_kk4.4_k314_alpha1", branch="rls_pxa1908_kk4.4_k314_alpha1", builderNames=["gc_virtual_build"], hour=20, minute=00,properties ={"Graphic_Build":"False","useremail":"fuqzhai@marvell.com","PPAT":"False","purpose":"","Test_Case_Build":"False",})
c["schedulers"].append(gcvb_rls_pxa1908_kk44_k314_alpha1)
gcvb_rls_pxa1908_kk44_beta1= timed.Nightly(name="gcvb_rls_pxa1908_kk4.4_beta1", branch="rls_pxa1908_kk4.4_beta1", builderNames=["gc_virtual_build"], hour=20, minute=00,properties ={"Graphic_Build":"False","useremail":"fuqzhai@marvell.com","PPAT":"False","purpose":"","Test_Case_Build":"False",})
c["schedulers"].append(gcvb_rls_pxa1908_kk44_beta1)
#gcvb
rls_pxa988_kk44_dev_k310_pxa1802= timed.Nightly(name="rls_pxa988_kk4.4_dev_k310_pxa1802_0", branch="rls_pxa988_kk4.4_dev_k310_pxa1802", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"wanglee@marvell.com","PPAT":"False","purpose":"rls_pxa988_kk4.4_dev_k310_pxa1802","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa988_kk44_dev_k310_pxa1802)
rls_pxa988_kk44_k310_beta3= timed.Nightly(name="rls_pxa988_kk4.4_k310_beta3_2", branch="rls_pxa988_kk4.4_k310_beta3", builderNames=["android_develop_build"], hour=2, minute=00,properties ={"Graphic_Build":"False","useremail":"wanglee@marvell.com","PPAT":"False","purpose":"","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa988_kk44_k310_beta3)
rls_pxa988_kk44_k310_cn_beta3= timed.Nightly(name="rls_pxa988_kk4.4_k310_cn_beta3_5", branch="rls_pxa988_kk4.4_k310_cn_beta3", builderNames=["android_develop_build"], hour=5, minute=00,properties ={"Graphic_Build":"False","useremail":"guojia@marvell.com","PPAT":"False","purpose":"AE branch","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa988_kk44_k310_cn_beta3)
rls_pxa988_kk44_L7_beta1= timed.Nightly(name="rls_pxa988_kk4.4_L7_beta1_1", branch="rls_pxa988_kk4.4_L7_beta1", builderNames=["android_develop_build"], hour=1, minute=00,properties ={"Graphic_Build":"False","useremail":"shiff@marvell.com","PPAT":"False","purpose":"L7 Beta1","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa988_kk44_L7_beta1)
rls_pxa1928_kk44_beta2= timed.Nightly(name="rls_pxa1928_kk4.4_beta2_3", branch="rls_pxa1928_kk4.4_beta2", builderNames=["android_develop_build"], hour=3, minute=00,properties ={"Graphic_Build":"False","useremail":"zacwang@marvell.com","PPAT":"False","purpose":"pxa1928 kk4.4 beta2","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1928_kk44_beta2)
rls_pxa1908_kk44_k314_alpha1= timed.Nightly(name="rls_pxa1908_kk4.4_k314_alpha1_4", branch="rls_pxa1908_kk4.4_k314_alpha1", builderNames=["android_develop_build"], hour=4, minute=00,properties ={"Graphic_Build":"False","useremail":"guojia@marvell.com","PPAT":"False","purpose":"K314 ss branch","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1908_kk44_k314_alpha1)
rls_pxa988_kk44_k310_dev_beta3_ims= timed.Nightly(name="rls_pxa988_kk4.4_k310_dev_beta3_ims_0", branch="rls_pxa988_kk4.4_k310_dev_beta3_ims", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"wanglee@marvell.com","PPAT":"False","purpose":"","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa988_kk44_k310_dev_beta3_ims)
pxa1928_lp50= timed.Nightly(name="pxa1928-lp5.0_1", branch="pxa1928-lp5.0", builderNames=["android_develop_build"], hour=1, minute=00,properties ={"Graphic_Build":"False","useremail":"jzuo@marvell.com","PPAT":"False","purpose":"","Test_Case_Build":"False",})
c["schedulers"].append(pxa1928_lp50)
rls_pxa1908_kk44_dev_ot_porting= timed.Nightly(name="rls_pxa1908_kk4.4_dev_ot_porting_5", branch="rls_pxa1908_kk4.4_dev_ot_porting", builderNames=["android_develop_build"], hour=5, minute=00,properties ={"Graphic_Build":"False","useremail":"yfshi@marvell.com","PPAT":"False","purpose":"owner Xin Jiang","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1908_kk44_dev_ot_porting)
rls_pxa1908_kk44_dev_L55M= timed.Nightly(name="rls_pxa1908_kk4.4_dev_L55M_5", branch="rls_pxa1908_kk4.4_dev_L55M", builderNames=["android_develop_build"], hour=5, minute=00,properties ={"Graphic_Build":"False","useremail":"guojia@marvell.com","PPAT":"False","purpose":"Nortion FF","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1908_kk44_dev_L55M)
rls_pxa1908_kk44_beta1= timed.Nightly(name="rls_pxa1908_kk4.4_beta1_0", branch="rls_pxa1908_kk4.4_beta1", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"yfshi@marvell.com","PPAT":"False","purpose":"owner Xin Jiang","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1908_kk44_beta1)
rls_pxa1928_kk44_beta2_att= timed.Nightly(name="rls_pxa1928_kk4.4_beta2_att_0", branch="rls_pxa1928_kk4.4_beta2_att", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"yfshi@marvell.com","PPAT":"False","purpose":"owner moshe","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1928_kk44_beta2_att)
rls_pxa1928_lp50_dev_virt= timed.Nightly(name="rls_pxa1928_lp5.0_dev_virt_4", branch="rls_pxa1928_lp5.0_dev_virt", builderNames=["android_develop_build"], hour=4, minute=00,properties ={"Graphic_Build":"False","useremail":"jzuo@marvell.com","PPAT":"False","purpose":"Virtuallization","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1928_lp50_dev_virt)
rls_pxa1920_lp50_L7_alpha1= timed.Nightly(name="rls_pxa1920_lp5.0_L7_alpha1_0", branch="rls_pxa1920_lp5.0_L7_alpha1", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"shiff@marvell.com","PPAT":"False","purpose":"","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1920_lp50_L7_alpha1)
rls_pxa1920_lp50_L7_beta1_0= timed.Nightly(name="rls_pxa1920_lp5.0_L7_beta1_0", branch="rls_pxa1920_lp5.0_L7_beta1", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"shiff@marvell.com","PPAT":"False","purpose":"L7 lp5.0 beta1","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1920_lp50_L7_beta1_0)
rls_pxa1928_lp50_dev_camerav3_0= timed.Nightly(name="rls_pxa1928_lp5.0_dev_camerav3_0", branch="rls_pxa1928_lp5.0_dev_camerav3", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"wanglee@marvell.com","PPAT":"False","purpose":"camera dev","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1928_lp50_dev_camerav3_0)
rls_pxa1928_lp50_alpha1_0= timed.Nightly(name="rls_pxa1928_lp5.0_alpha1_0", branch="rls_pxa1928_lp5.0_alpha1", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"wanglee@marvell.com","PPAT":"False","purpose":"  ","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1928_lp50_alpha1_0)
rls_pxa1908_lp50_dev_mwc_demo_0= timed.Nightly(name="rls_pxa1908_lp5.0_dev_mwc_demo_0", branch="rls_pxa1908_lp5.0_dev_mwc_demo", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"jiangxin@marvell.com","PPAT":"False","purpose":"MWC Demo, owner Xin Jiang","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1908_lp50_dev_mwc_demo_0)
rls_pxa1908_kk44_beta1_dev_arch32_4= timed.Nightly(name="rls_pxa1908_kk4.4_beta1_dev_arch32_4", branch="rls_pxa1908_kk4.4_beta1_dev_arch32", builderNames=["android_develop_build"], hour=4, minute=00,properties ={"Graphic_Build":"False","useremail":"jiangxin@marvell.com","PPAT":"False","purpose":"arch32","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1908_kk44_beta1_dev_arch32_4)
rls_pxa1928_kk44_beta2_dev_delswcodec_5= timed.Nightly(name="rls_pxa1928_kk4.4_beta2_dev_delswcodec_5", branch="rls_pxa1928_kk4.4_beta2_dev_delswcodec", builderNames=["android_develop_build"], hour=5, minute=00,properties ={"Graphic_Build":"False","useremail":"wanglee@marvell.com","PPAT":"False","purpose":"","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1928_kk44_beta2_dev_delswcodec_5)
rls_pxa1908_kk44_beta1_dev_ot_4= timed.Nightly(name="rls_pxa1908_kk4.4_beta1_dev_ot_4", branch="rls_pxa1908_kk4.4_beta1_dev_ot", builderNames=["android_develop_build"], hour=4, minute=00,properties ={"Graphic_Build":"False","useremail":"jiangxin@marvell.com","PPAT":"False","purpose":"for ot","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1908_kk44_beta1_dev_ot_4)
pxa1936_lp51_0= timed.Nightly(name="pxa1936-lp5.1_0", branch="pxa1936-lp5.1", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"fuqzhai@marvell.com","PPAT":"False","purpose":"helan3 lp5.1 master branch","Test_Case_Build":"False",})
c["schedulers"].append(pxa1936_lp51_0)
rls_pxa1908_lp50_dev_arch32_5= timed.Nightly(name="rls_pxa1908_lp5.0_dev_arch32_5", branch="rls_pxa1908_lp5.0_dev_arch32", builderNames=["android_develop_build"], hour=5, minute=00,properties ={"Graphic_Build":"False","useremail":"jiangxin@marvell.com","PPAT":"False","purpose":"arch32 lp5.0","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1908_lp50_dev_arch32_5)
pxa1928_lp51_0= timed.Nightly(name="pxa1928-lp5.1_0", branch="pxa1928-lp5.1", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"wanglee@marvell.com","PPAT":"False","purpose":"","Test_Case_Build":"False",})
c["schedulers"].append(pxa1928_lp51_0)
rls_pxa1936_lp51_k314_alpha1_0= timed.Nightly(name="rls_pxa1936_lp5.1_k314_alpha1_0", branch="rls_pxa1936_lp5.1_k314_alpha1", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"fuqzhai@marvell.com","PPAT":"False","purpose":"","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1936_lp51_k314_alpha1_0)
rls_pxa1928_lp50_cmcc_virt_4= timed.Nightly(name="rls_pxa1928_lp5.0_cmcc_virt_4", branch="rls_pxa1928_lp5.0_cmcc_virt", builderNames=["android_develop_build"], hour=4, minute=00,properties ={"Graphic_Build":"False","useremail":"wanglee@marvell.com","PPAT":"False","purpose":"","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1928_lp50_cmcc_virt_4)
rls_pxa1956_lp51_dev_bringup_3= timed.Nightly(name="rls_pxa1956_lp5.1_dev_bringup_3", branch="rls_pxa1956_lp5.1_dev_bringup", builderNames=["android_develop_build"], hour=3, minute=00,properties ={"Graphic_Build":"False","useremail":"wzhfang@marvell.com","PPAT":"False","purpose":" ","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1956_lp51_dev_bringup_3)
rls_pxa1936_lp51_L7_alpha1_0= timed.Nightly(name="rls_pxa1936_lp5.1_L7_alpha1_0", branch="rls_pxa1936_lp5.1_L7_alpha1", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"shiff@marvell.com","PPAT":"False","purpose":"L7 MR1","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1936_lp51_L7_alpha1_0)
rls_pxa1936_lp51_k314_beta1_0= timed.Nightly(name="rls_pxa1936_lp5.1_k314_beta1_0", branch="rls_pxa1936_lp5.1_k314_beta1", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"fuqzhai@marvell.com","PPAT":"False","purpose":"helan3/ulc1 for CMCC OT","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1936_lp51_k314_beta1_0)
rls_pxa1928_lp51_alpha1_3= timed.Nightly(name="rls_pxa1928_lp5.1_alpha1_3", branch="rls_pxa1928_lp5.1_alpha1", builderNames=["android_develop_build"], hour=3, minute=00,properties ={"Graphic_Build":"False","useremail":"wanglee@marvell.com","PPAT":"False","purpose":"","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1928_lp51_alpha1_3)
rls_pxa1928_lp51_beta1_0= timed.Nightly(name="rls_pxa1928_lp5.1_beta1_0", branch="rls_pxa1928_lp5.1_beta1", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"wanglee@marvell.com","PPAT":"False","purpose":"","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1928_lp51_beta1_0)
rls_pxa1936_lp51_k314_beta1_dev_volte_0= timed.Nightly(name="rls_pxa1936_lp5.1_k314_beta1_dev_volte_0", branch="rls_pxa1936_lp5.1_k314_beta1_dev_volte", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"fuqzhai@marvell.com","PPAT":"False","purpose":"","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1936_lp51_k314_beta1_dev_volte_0)
rls_pxa1936_lp5.1_k314_beta1_cmcc_ot= timed.Nightly(name="rls_pxa1936_lp5.1_k314_beta1_cmcc_ot_0", branch="rls_pxa1936_lp5.1_k314_beta1_cmcc_ot", builderNames=["android_develop_build"], hour=0, minute=00,properties ={"Graphic_Build":"False","useremail":"fuqzhai@marvell.com","PPAT":"False","purpose":"1936ff cmcc ot","Test_Case_Build":"False",})
c["schedulers"].append(rls_pxa1936_lp5.1_k314_beta1_cmcc_ot_0)
